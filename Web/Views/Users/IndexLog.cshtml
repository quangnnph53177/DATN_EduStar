@model IEnumerable<API.ViewModel.AuditLogViewModel>
@{
    ViewData["Title"] = "Nhật ký hoạt động";
}
@functions {
    public string fmt(string? json)
    {
        try
        {
            var doc = System.Text.Json.JsonDocument.Parse(json ?? "");
            return System.Text.Json.JsonSerializer.Serialize(doc, new System.Text.Json.JsonSerializerOptions
                {
                    WriteIndented = true
                });
        }
        catch
        {
            return json ?? "";
        }
    }
}

<h2 style="margin-bottom: 20px; font-weight: bold; color: #333;">Nhật ký hoạt động</h2>
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

@if (!Model.Any())
{
    <div class="alert alert-info">Không có bản ghi nào.</div>
}
else
{
    <div style="overflow-x: auto;">
        <table class="table table-bordered table-hover table-striped" style="font-size: 14px; border-radius: 8px; table-layout: fixed; width: 100%;">
            <thead style="background-color: #343a40; color: #fff; text-align: center;">
                <tr>
                    <th style="width: 50px;">#</th>
                    <th style="width: 150px;">Tên người dùng</th>
                    <th style="width: 120px;">Hành động</th>
                    <th style="width: 300px;">Dữ liệu cũ</th>
                    <th style="width: 300px;">Dữ liệu mới</th>
                    <th style="width: 150px;">Người thực hiện</th>
                    <th style="width: 160px;">Thời gian</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in Model)
                {
                    <tr>
                        <td>@log.Id</td>
                        <td>@log.UserName</td>
                        <td>@log.Active</td>
                        @* <td>
                            <details>
                                <summary style="cursor: pointer; color: #007bff;">Xem chi tiết</summary>
                                <pre style="white-space: pre-wrap; word-wrap: break-word; background-color: #f8f9fa; padding: 8px; border-radius: 5px; font-size: 13px; font-family: Consolas, monospace; max-height: 250px; overflow: auto;">@fmt(log.OldData)</pre>
                            </details>
                        </td>
                        <td>
                            <details>
                                <summary style="cursor: pointer; color: #007bff;">Xem chi tiết</summary>
                                <pre style="white-space: pre-wrap; word-wrap: break-word; background-color: #f8f9fa; padding: 8px; border-radius: 5px; font-size: 13px; font-family: Consolas, monospace; max-height: 250px; overflow: auto;">@fmt(log.NewData)</pre>
                            </details>
                        </td> *@
                        <td class="text-center">
                            <button type="button" class="btn btn-sm btn-info" onclick="toggleJson('oldData_@log.Id')">Xem</button>
                            <div id="oldData_@log.Id" class="formatted-json-table mt-2 d-none" data-json="@Html.Raw(Html.Encode(log.OldData))"></div>
                        </td>

                        <td class="text-center">
                            <button type="button" class="btn btn-sm btn-success" onclick="toggleJson('newData_@log.Id')">Xem</button>
                            <div id="newData_@log.Id" class="formatted-json-table mt-2 d-none" data-json="@Html.Raw(Html.Encode(log.NewData))"></div>
                        </td>
                        <td>@log.PerformeByName</td>
                        <td>@(log.Timestamp?.ToString("dd/MM/yyyy HH:mm:ss") ?? "N/A")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@section Scripts {
    <script>
        function toggleJson(id) {
            const container = document.getElementById(id);

            if (!container) return;

            if (container.classList.contains('d-none')) {
                // Lần đầu hiển thị thì render JSON
                if (!container.innerHTML.trim()) {
                    try {
                        const jsonString = container.getAttribute("data-json");
                        const json = JSON.parse(jsonString);

                        let html = '<table class="table table-bordered table-sm">';
                        html += '<thead class="table-light"><tr><th>Trường</th><th>Giá trị</th></tr></thead><tbody>';

                        for (const key in json) {
                            if (!json.hasOwnProperty(key)) continue;

                            let value = json[key];
                            const lowerKey = key.toLowerCase();

                            if ((lowerKey.includes("image") || lowerKey.includes("avatar") || lowerKey.includes("photo")) &&
                                typeof value === "string" &&
                                (value.startsWith("http") || value.startsWith("/"))) {
                                value = `<img src="${value}" alt="${key}" style="max-height: 150px;">`;
                            }

                            html += `<tr><td>${key}</td><td>${value}</td></tr>`;
                        }

                        html += '</tbody></table>';
                        container.innerHTML = html;
                    } catch (err) {
                        container.innerHTML = '<p class="text-danger">Không thể hiển thị dữ liệu (không phải JSON hợp lệ).</p>';
                    }
                }

                container.classList.remove('d-none');
            } else {
                container.classList.add('d-none');
            }
        }
    </script>
}

